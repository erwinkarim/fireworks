.modal.fade#nuke-em-modal{ :tabindex => '-1', :role => 'dialog'}
  .modal-dialog
    .modal-content
      .modal-header
        %button.close{ :type => 'button', :'data-dismiss' => 'modal'}
          %span &times;
        .modal-title
          %h4#nuke-em-title Nuke-Em
      .modal-body
        <strong>Warning:</strong> This action will kill everyone that using this feature. To confirm you really want to do this, please type the name of the feature in the input box below
        = form_tag '#', :id => "nuke-em-form", :method => :delete do
          %fieldset.form-group
            %input.form-control.hidden{ :type => "text", :id => "faker" }
            %input.form-control{ :id => "nuke-em-sanity-check", :type => "text"}
        #nuke-em-status
      .modal-footer
        %button.btn.btn-secondary{ :type => 'button', :'data-dismiss' => 'modal'} Close
        %button.btn.btn-danger#nuke-em{ :type => 'button', :data => { :url => '', :feature => '', :random => ''} } Nuke-em
.modal.fade#mail-modal{ :tabindex => '-1', :role => 'dialog'}
  .modal-dialog
    .modal-content
      .modal-header
        %button.close{ :type => 'button', :'data-dismiss' => 'modal'}
          %span &times;
        .modal-title
          %h4 Message
      .modal-body
        %p Mail Dialog Here
      .modal-footer
        %button.btn.btn-secondary{ :type => 'button', :'data-dismiss' => 'modal'} Close
        %button.btn.btn-primary{ :type => 'button'} Send Message
.modal.fade#feature-settings-modal{ :tabindex => '-1', :role => 'dialog'}
  .modal-dialog
    .modal-content
      .modal-header
        %button.close{ :type => 'button', :'data-dismiss' => 'modal'}
          %span &times;
        .modal-title
          %h4#feat-settings-title Settings
      .modal-body
        = form_tag '#', :id => 'feature-settings-form' do
          .checkbox
            %label
              %input#uniq-users-checkbox{ :type => "checkbox", :name => 'enforce-uniq' } Enforce Unique Users
      .modal-footer
        %button.btn.btn-secondary{ :type => 'button', :'data-dismiss' => 'modal'} Close
        %button.btn.btn-primary#feature-settings-update{ :type => 'button'} Update Settings
.modal.fade#new-licserver-modal{ :tabindex => '-1', :role => 'dialog'}
  .modal-dialog
    .modal-content
      .modal-header
        %button.close{ :type => 'button', :'data-dismiss' => 'modal'}
          %span &times;
        .modal-title
          %h4#feat-settings-title New Licserver
      .modal-body
        = form_tag licservers_path, {:id => 'new-licserver-form', :'data-mode' => 'create'} do
          %fieldset.form-group
            %label License Server Address
            %input.form-control#licserver-address{ :type => 'text', :placeholder => "port@hostname", :name => "licserver-location"}
          %fieldset.form-group
            %label tags
            %input.form-control#licserver-tags{ :type => "text", :placeholder => "tags seperated by spaces", :name => "licserver-tags"}
          %fieldset.form-group
            %label License Type
            %select.form-control#licserver-type{ :name => "licserver_type" }
              = options_for_select LicenseType.all.map{|x| [x.name, x.id]}
      .modal-footer
        %button.btn.btn-secondary{ :type => 'button', :'data-dismiss' => 'modal'} Close
        %button.btn.btn-primary#licserver-create{ :type => 'button'} Create Licserver
:javascript
  $('#nuke-em-modal').on('show.bs.modal', function(e){
    //console.log( 'called by ' + $(e.relatedTarget).attr('id') );

    //setup to nuke-em
    $(this).find('#nuke-em-title').text("Nuke " + $(e.relatedTarget).data('feature') + " users");
    $('#nuke-em').attr('data-url', $(e.relatedTarget).data('kill-path') );
    $('#nuke-em').attr('data-feature', $(e.relatedTarget).data('feature') );
    $('#nuke-em').attr('data-random', $(e.relatedTarget).data('random') );
  });

  $('#feature-settings-modal').on('show.bs.modal', function(e){

    //setup the modal
    $(this).find('#feat-settings-title').text($(e.relatedTarget).data('feature') + " settings");
    $(document).find('#feature-settings-form').attr('action', $(e.relatedTarget).data('info-path'))

    //get the unique users status
    $.getJSON( $(e.relatedTarget).data('info-path'), null, function(data){
      if($.parseJSON(data.uniq_users) == true) {
        $(document).find('#uniq-users-checkbox').prop('checked', true);
      } else {
        $(document).find('#uniq-users-checkbox').prop('checked', false);
      };
    });
  });

  $('#feature-settings-update').click(function(){
      //update the feature
      $.ajax( $('#feature-settings-form').attr('action'), {
          data: $('#feature-settings-form').serialize(),
          method: 'PATCH',
          success: function(data, textStatus){
            console.log('patched feature settings with status ' + textStatus);
            $('#feature-settings-modal').modal('hide');
          },
          error: function(jqXHR, textStatus){
            console.log('patched feature settings with status ' + textStatus);
            $('#feature-settings-modal').modal('hide');
          }
      } );
  });

  $('#nuke-em').click( function(){
      //sanity check before killing users
      console.log('nuke ' + $(this).data('feature') + ' users');
      var random_id = $(this).data('random');

      if ( $(this).data('feature') == $('#nuke-em-sanity-check').val() ) {
        console.log('start nukeing people');

        $.ajax($(this).data('url') + "?" + $('#nuke-em-form').serialize() , {
            method: "DELETE",
            success: function(){
              console.log('killed a lot of users');

              //clean up
              $('#nuke-em-sanity-check').val("");
              $('#nuke-em-modal').modal('toggle');
              $('#user-refresh-' + random_id).click();
            }
        });
      } else {
        console.log('error: did not match');
      }
  });

  $('#new-licserver-modal').on('show.bs.modal', function(e){
    //clean up before display
    console.log('attempt to clean up');

    var handle = $(e.relatedTarget)
    var modal_handle = $(this);
    if(handle.data('type') == 'create') {
      $(document).find('#licserver-address').val('');
      $(document).find('#licserver-tags').val('');

      $('#new-licserver-form').data('mode', 'create');
      $('#new-licserver-form').attr('action', "#{licservers_path}");
      $('#new-licserver-form').attr('method', "post");

      modal_handle.find('#feat-settings-title').text('New Licserver');
      modal_handle.find('#licserver-create').text('Create Licserver');
    } else if( handle.data('type') == 'edit' ){
      $.get(handle.data('source'), null, function(data){
        $(document).find('#licserver-address').val(data.name);
        $(document).find('#licserver-tags').val(data.tags);
        $(document).find('#licserver-type').val(data.type);

        //setup to edit
        $('#new-licserver-form').data('mode', 'edit')
        $('#new-licserver-form').attr('action', handle.data('patch'));
        $('#new-licserver-form').attr('method', "patch");

        modal_handle.find('#feat-settings-title').text('Update Licserver');
        modal_handle.find('#licserver-create').text('Update Licserver');
      })
    };
  });

  $('#licserver-create').click( function(){
    //need to handle between creating new licserver and updating current one
    var reload_page = function(){
        //reload the main listing then
        $('#tags-target').empty().append('<i class="fa fa-cog fa-spin"></i>');
        load_main( $('#tags-target'));
    };

    if($('#new-licserver-form').data('mode') == 'edit'){
      //update a licserver
      console.log('attempt to update licserver...');
      $.ajax($('#new-licserver-form').attr('action'), {
          method:'PATCH',
          data:$('#new-licserver-form').serialize(),
          sucess: function(data){
            console.log('licserver patched');
          },
          error: function(jqXHR, textStatus){
            console.log('failed to patch licserver');
          }
      }).done(function(){
        reload_page();
      });
    } else {
      console.log('attempt to create license');
      //create a new licserver
      $.post( $('#new-licserver-form').attr('action'), $('#new-licserver-form').serialize(), function(data, textStatus){
        console.log('posted new licserver info with status ' + textStatus);
      } ).fail( function( jqXHR, textStatus){
        console.log('posted new licserver info with status ' + textStatus);
      }).done(function(){
        reload_page();
      });
    }

    $('#new-licserver-modal').modal('hide');
  });

  $('#feature-settings-modal').on('show.bs.modal', function(e){

  });

  //typeahad to look for search-query
  $('#search-query').typeahead({
      source: function(){
          $.get( "#{search_path}", { query: $('#search-query').val()}, function(data){
              $('#tags-target').empty().append(data).ready( function(){
                $(document).find('.collapse').each( function(){
                  setup_collapse($(this));
                });
              });
          });
          return [];
      },
      delay: 200,
  });

  $('#search-query').on('keyup', function(){
      if( $('#search-query').val() == "") {
        //clear and reapply
        $('#tags-target').empty();
        load_main($('#tags-target'));
      };
  });
